    Relaci√≥n entre las clases:
    
    
    1.	PipelineStack ‚Üí Crea el pipeline y usa un objeto de LeadConversionFactory.
	2.	LeadConversionFactory ‚Üí Define los pasos del pipeline.
	3.	ProcessingStep ‚Üí Representa cada paso dentro del pipeline.
	4.	SagemakerStack ‚Üí Crea los recursos necesarios para ejecutar el pipeline (buckets, roles, etc.).
	5.	Pipeline (de SageMaker) ‚Üí Es el objeto final que contiene todos los pasos del pipeline y que se ejecutar√° en AWS.





Imagina que el Pipeline es una F√°brica de Autom√≥viles
	1.	PipelineStack es la f√°brica completa.
	2.	LeadConversionFactory es la l√≠nea de ensamblaje que arma los autos.
	3.	ProcessingStep son las m√°quinas de ensamblaje que realizan tareas espec√≠ficas (ejemplo: pintar el coche).
	4.	SagemakerStack es la infraestructura de la f√°brica (los almacenes y herramientas necesarias).
	5.	Pipeline es el auto terminado, listo para venderse.



    Aqu√≠ empieza todo. Se crea una instancia de PipelineStack y se le pasa un objeto LeadConversionFactory.

    lead_conversion_pipeline = PipelineStack(
    app,
    id=f"{LOGICAL_PREFIX}-PipelinesStack",
    factory=LeadConversionFactory(  # Este es el objeto que se pasa como par√°metro
        pipeline_config_parameter="Cloud Developer",
        local_mode=LOCAL_MODE
    ),
    env=cdk.Environment(account=account, region=region),
    local_mode=LOCAL_MODE
)

	‚Ä¢	PipelineStack es la f√°brica.
	‚Ä¢	LeadConversionFactory es la l√≠nea de ensamblaje que sabe c√≥mo construir el pipeline.
	‚Ä¢	factory=LeadConversionFactory(...) ‚Üí Se pasa como par√°metro el objeto LeadConversionFactory, que sabe c√≥mo armar el pipeline.

    Aqu√≠ tienes c√≥mo se conectan las clases en el c√≥digo:
	1.	app.py: Crea el objeto LeadConversionFactory y lo pasa a PipelineStack.
	2.	PipelineStack: Usa create_pipeline() para construir el pipeline.
	3.	create_pipeline(): Llama al m√©todo create() de LeadConversionFactory.
	4.	LeadConversionFactory.create(): Define los pasos del pipeline usando ProcessingStep.
	5.	ProcessingStep: Representa cada tarea dentro del pipeline.
	6.	SagemakerStack: Crea los recursos (buckets, roles, etc.) que el pipeline necesita.

    	1.	El proyecto empieza en app.py, que crea PipelineStack y le pasa un LeadConversionFactory.
	2.	PipelineStack usa create_pipeline para construir el pipeline con LeadConversionFactory.
	3.	LeadConversionFactory define los pasos del pipeline con ProcessingStep.
	4.	ProcessingStep representa cada tarea que se ejecutar√° en SageMaker.
	5.	SagemakerStack crea los recursos (buckets, roles) para que el pipeline funcione.


    e crea un objeto de LeadConversionFactory en app.py.
	2.	Ese objeto se pasa a PipelineStack como factory.
	3.	Dentro de PipelineStack, se llama a create_pipeline pasando self.factory como pipeline_factory.
	4.	Dentro de create_pipeline, se usa pipeline_factory.create() para construir el pipeline.
	5.	create() en LeadConversionFactory devuelve un Pipeline con los pasos configurados.


    class F√°bricaDePizzas:
    def crear_pizza(self):
        return "üçï Pizza lista"

def hacer_pedido(fabrica: F√°bricaDePizzas):
    return fabrica.crear_pizza()

# Crear un objeto de la clase
mi_fabrica = F√°bricaDePizzas()

# Pasamos el objeto como par√°metro
pizza = hacer_pedido(mi_fabrica)

print(pizza)  # üçï Pizza lista

F√°bricaDePizzas ‚Üí Es LeadConversionFactory.
	‚Ä¢	hacer_pedido(fabrica) ‚Üí Es create_pipeline(pipeline_factory).
	‚Ä¢	mi_fabrica = F√°bricaDePizzas() ‚Üí Se crea un objeto de LeadConversionFactory.
	‚Ä¢	hacer_pedido(mi_fabrica) ‚Üí Se pasa el objeto a create_pipeline.


    
El objeto que se crea con LeadConversionFactory se llama factory en app.py.
Despu√©s, se pasa con ese nombre a PipelineStack, donde se guarda en self.factory.
Cuando create_pipeline lo recibe, lo llama pipeline_factory, pero sigue siendo el mismo objeto.

üîπ Nombres de la misma instancia en distintas partes del c√≥digo
Lugar del c√≥digo	Nombre del objeto
app.py	factory
PipelineStack	self.factory
create_pipeline	pipeline_factory

As√≠ que aunque el nombre de la variable cambia, sigue siendo el mismo objeto en memoria.